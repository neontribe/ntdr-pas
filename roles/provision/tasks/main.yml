---
# If we have a local source then dump out the DB and file
- name: Export DB
  shell: drush sql-dump --result-file=/tmp/dump.sql
  become: no
  args:
    chdir: "{{ local }}"
  delegate_to: 127.0.0.1
  when: local is defined

- name: Tar up files folder (this may take some time)
  shell: tar -C {{ local }} -zcf /tmp/files.tgz sites/default/files
  become: no
  delegate_to: 127.0.0.1
  when: local is defined

# Gathering deployment data
- name: Check deploy directory
  file:
    path: "{{ var_www }}/"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    mode:  0755
    state: directory
  register: deploy_dir
  become: yes

- name: Get latest version
  ntdr_sort_versions_dir:
    path: "{{ deploy_dir.path }}"
    brandcode: "{{ brandcode }}"
  register: latest_version
  when: latest_version is not defined

- name: Check for local sql
  local_action: stat path={{ sql_file }}
  register: local_sql
  when: sql_file is defined

- name: Upload local sql "{{ sql_file }}"
  copy: src={{ sql_file }} dest=/tmp/{{ sql_file | basename }}
  when: sql_file is defined

- name: Copy make file to tmp
  copy: src={{ brandcode }}.make dest=/tmp/{{ brandcode }}.make

- name: Bump minor version number
  ntbumpversion:
    current: "{{ latest_version.stat.max_version }}"
    bump:  minor
    includepatch: false
  register: new_version

- name: Declare new directory
  set_fact: new_site={{ deploy_dir.path }}/{{ new_version.stat.short_version }}

# Do the make and create db/settings
- name: Drush make
  shell: drush --nocolor -q make /tmp/{{ brandcode }}.make {{ new_site }}

- set_fact: db_user={{ new_version.stat.short_version }}
- set_fact: db_name={{ new_version.stat.short_version }}
- set_fact: db_pass={{ new_version.stat.short_version }}

- name: Create new settings file
  template: src=settings.php.tpl dest={{ new_site }}/sites/default/settings.php

- name: Create db using existing local settings file
  mysql_db:
    name: "{{ db_name }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_pw }}"

- name: Create db user using existing local settings file
  mysql_user:
    name: "{{ db_name }}"
    password: "{{ db_pass }}"
    priv: "{{ db_name }}.*:ALL"
    state: present
    login_user: root
    login_password: "{{ mysql_root_pw }}"

# If we have a source value copy the files
- name: Copy files folder (this may take some time)
  shell: rsync -a {{ source }}/sites/default/files {{ new_site }}/sites/default
  become: yes
  when: source is defined

- name: Upload and unpack files (this may take some time)
  unarchive: src="{{ files_bundle }}" dest={{ new_site }}/sites/default
  when: files_bundle is defined

- name: Copy make file to tmp
  copy: src={{ brandcode }}.make dest={{ new_site }}/{{ brandcode }}.make

- name: Stat latest link
  stat: path="{{ var_www }}/latest"
  register: latest_link

- name: Stat testing link
  stat: path="{{ var_www }}/testing"
  register: testing_link

- name: Stat rc link
  stat: path="{{ var_www }}/rc"
  register: rc_link

- name: If latest and testing do not exist create latest link
  file: src={{ new_site }} dest={{ var_www }}/latest state=link
  when:
    - not latest_link.stat.exists
    - not testing_link.stat.exists

- name: If latest exists and testing doesn't create testing link
  file: src={{ new_site }} dest={{ var_www }}/testing state=link
  when:
    - latest_link.stat.exists
    - not testing_link.stat.exists

- name: If testing link exists rc link doesn't crate the RC link
  file: src={{ var_www }}/testing dest={{ var_www }}/rc state=link
  when:
    - testing_link.stat.exists
    - not rc_link.stat.exists

